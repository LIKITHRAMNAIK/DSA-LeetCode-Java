// class Solution {
//     public int maxProfit(int[] prices) {
//         int profit = 0;
//         int buy = prices[0];

//         for(int i=1;i<prices.length;i++){
//             if(prices[i] < buy){
//                 buy = prices[i];
//             }else if(prices[i] - buy > profit){
//                 profit = prices[i] - buy;
//             }
//         }
//         return profit;
//     }
// }

// DP by using Array
// class Solution{
//     public int maxProfit(int[] prices){
//         int n = prices.length;
//         int dp[]=new int[n];
//         dp[0] = prices[0];
//         int maxprofit=0;
//         for(int i=1;i<n;i++){
//             dp[i] = Math.min(dp[i-1],prices[i]);
//             maxprofit = Math.max(maxprofit,prices[i]-dp[i]);
//         }
//         return maxprofit;
//     }
// }

// Optimized Dp
class Solution{
    public int maxProfit(int[] prices){
        int minprice = prices[0];
        int maxprofit = 0;
        for(int i=1;i<prices.length;i++){
            minprice = Math.min(minprice, prices[i]);
            maxprofit = Math.max(maxprofit, prices[i]-minprice);
        }
        return maxprofit;
    }
}