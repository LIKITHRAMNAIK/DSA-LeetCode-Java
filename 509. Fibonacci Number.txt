// class Solution {
//     public int fib(int n) {
//         if(n < 2){
//             return n;
//         }
//         if(n < 5){
//             return n-1;
//         }
//         return fib(n-1) + fib(n-2);
//     }
// }

// by recursion
// class Solution{
//     public int fib(int n){
//         return fib1(n);
//     }
//     public static int fib1(int n){
//         if(n<=1) return n;
//         return fib1(n-1) + fib1(n-2);
//     }
// }

// by dp
class Solution{
    public int fib(int n){
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        return fib1(n,dp);
    }
    public static int fib1(int n, int []dp){
        if(n<=1) return n;
        if(dp[n] != -1) return dp[n];
        return dp[n] = fib1(n-1,dp) + fib1(n-2,dp);
    }
}

///////////// or /////////////

class Solution {
    public int fib(int n) {
        if(n <= 1){
            return n;
        }
        return fib(n-1) + fib(n-2);
    }
}

////////////// or //////////////////


class Solution {
    public int fib(int n) {
        if(n <= 1) return n;
        int a = 0, b = 1;
        for(int i = 2; i <=n ; i++){
            int temp = b;
            b = a + b;
            a = temp;
        }
        return b;
    }
}

////////////// or //////////////////

class Solution {
    
    public int fib(int n) {
        if(n<2)
        {
            return n;
        }
        if(n<5)
        {
            return n-1;
        }
        return fib(n-1)+fib(n-2);
    }
}