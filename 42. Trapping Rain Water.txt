class Solution{
    public int trap(int []height){
        int n = height.length;
        if(n==0){
            return 0;
        }

        int[] lmax = new int[n];
        int[] rmax = new int[n];

        lmax[0] = height[0];
        for(int i=1;i<n;i++){
            lmax[i] = Math.max(lmax[i-1], height[i]);
        }

        rmax[n-1] = height[n-1];
        for(int i=n-2;i>=0;i--){
            rmax[i] = Math.max(rmax[i+1], height[i]);
        }

        int totalWater = 0;
        for(int i=0;i<n;i++){
            totalWater += Math.min(lmax[i], rmax[i]) - height[i];
        }
        return totalWater;
    }
}

////////////////////// or ////////////////////////
class Solution {
    public int maxWater(int arr[]) {
        // code here
        if (arr.length == 0) return 0;
        int n=arr.length;
        int []left = new int[n];
        int []right = new int[n];
        
        left[0] = arr[0];
        for(int i=1;i<n;i++){
            left[i] = Math.max(left[i-1],arr[i]);
        }
        
        right[n-1] = arr[n-1];
        for(int i=n-2;i>=0;i--){
            right[i] = Math.max(right[i+1],arr[i]);
        }
        
        int ans = 0;
        for(int i=0;i<n;i++){
            ans += Math.min(left[i],right[i]) - arr[i];
        }
        return ans;
    }
}
