// class Solution {
//     public int rob(int[] nums) {
//         int sum1 = 0;
//         int sum2 = 0;
//         for(int i=0;i<nums.length;i += 2){
//             sum1 += nums[i];
//         }
//         for(int i=1;i<nums.length;i += 2){
//             sum2 += nums[i];
//         }
//         return Math.max(sum1, sum2);
//     }
// }

// by Pro Dp
// class Solution {
//     public int rob(int[] nums) {
//         int prev2 = 0;
//         int prev1 = 0;

//         for (int num : nums) {
//             int temp = prev1; 
//             prev1 = Math.max(prev1, prev2 + num);
//             prev2 = temp;
//         }

//         return prev1;
//     }
// }

// by DP
class Solution{
    public int rob(int[]nums){
        int n = nums.length;
        if(n == 0) return 0;
        if(n == 1) return nums[0];

        int dp[] = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0],nums[1]);

        for(int i=2;i<n;i++){
            dp[i] = Math.max(dp[i-1], nums[i]+dp[i-2]);
        }
        return dp[nums.length-1];
    }
}